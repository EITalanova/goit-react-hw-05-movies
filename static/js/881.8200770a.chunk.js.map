{"version":3,"file":"static/js/881.8200770a.chunk.js","mappings":"gRACA,EAA0B,wBAA1B,EAA0D,sBAA1D,EAAsF,oBAAtF,EAAiH,qB,SCoFjH,EA7Ee,WACb,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAWF,EAASG,SAAWH,EAASI,OACxCC,EAAYT,EAAaU,IAAI,SA8BnC,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXH,EADW,wDAIhBN,GAAa,GAJG,mBAMOU,EAAAA,EAAAA,IAAeJ,GANtB,OAMRZ,EANQ,OAOdC,EAAUD,EAAOiB,SAPH,kDASdC,QAAQC,IAAR,MATc,yBAWdb,GAAa,GAXC,6EAAH,qDAcfS,GACD,GAAE,CAACH,KAGF,iBAAKQ,UAAWC,EAAhB,WACE,kBAAMC,SA9BW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAOC,MAAMC,MACxBH,GACHI,IAAAA,OAAAA,QAAwB,6BAE1BzB,EAA0B,KAAVqB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAC7C,EAsBG,WACE,kBACEL,UAAWC,EACXS,KAAK,OACLC,KAAK,QACLC,YAAY,qBACZC,aAAa,MACbC,MAAM,YACNC,aAAcvB,KAEhB,mBACEQ,UAAWC,EACXS,KAAK,SACLM,QAAQ,WACRF,MAAM,YACNG,KAAK,QALP,wBAUF,gCACGhC,IAAa,wCACbO,IACC,wBACGZ,EAAOsC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOT,EAAd,EAAcA,KAAd,OACV,eAAIX,UAAWC,EAAf,UACE,SAAC,KAAD,CAAMoB,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMlC,GAAlC,SACG+B,GAAST,KAFkBQ,EADtB,OASdvC,EAAO4C,QAAUhC,IAAa,iDAIvC,C,+LCjFDiC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,sGACFF,EAAAA,EAAAA,IAAA,mCAAsCC,IADpC,uBACjBE,EADiB,EACjBA,KADiB,kBAElBA,EAAK/B,SAFa,2CAAH,qDAKbD,EAAc,mCAAG,WAAOS,GAAP,yFACHoB,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDrB,EAApD,+CADG,uBAClBuB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKdC,EAAe,mCAAG,WAAOC,GAAP,uFACTL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCJ,IACnDK,OAAM,SAAAC,GACH,MAAM,IAAIC,MAAM,OACnB,IAJsB,cACrBC,EADqB,yBAKpBA,EAAIN,MALgB,2CAAH,sDAQfO,EAAe,mCAAG,WAAOL,GAAP,yFACJL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,EAA9C,oBADI,uBACnBE,EADmB,EACnBA,KADmB,kBAEpBA,EAAKQ,MAFe,2CAAH,sDAKfC,EAAe,mCAAG,WAAOP,GAAP,yFACJL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,IAD1C,uBACnBE,EADmB,EACnBA,KADmB,kBAEpBA,EAAK/B,SAFe,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","servises/movie-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Movies_section__bjPDA\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\",\"item\":\"Movies_item__Ba4aJ\"};","import Notiflix from 'notiflix';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { getSearchMovie } from 'servises/movie-api';\n\nimport style from './Movies.module.css';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoadind, setIsLoading] = useState(false);\n  const location = useLocation();\n  const fullPath = location.pathname + location.search;\n  const movieName = searchParams.get('query');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.movie.value;\n    if (!query) {\n      Notiflix.Notify.failure('Enter please a movie name');\n    }\n    setSearchParams(query !== '' ? { query } : {});\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!movieName) {\n        return;\n      }\n      setIsLoading(true);\n      try {\n        const movies = await getSearchMovie(movieName);\n        setMovies(movies.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieName]);\n\n  return (\n    <div className={style.section}>\n      <form onSubmit={handleSubmit}>\n        <input\n          className={style.input}\n          type=\"text\"\n          name=\"movie\"\n          placeholder=\"Enter the movie...\"\n          autoComplete=\"off\"\n          color=\"secondary\"\n          defaultValue={movieName}\n        />\n        <button\n          className={style.btn}\n          type=\"submit\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          size=\"small\"\n        >\n          Search\n        </button>\n      </form>\n      <>\n        {isLoadind && <div>Loading...</div>}\n        {movieName && (\n          <ul>\n            {movies.map(({ id, title, name }) => (\n              <li className={style.item} key={id}>\n                <Link to={`${id}`} state={{ from: fullPath }}>\n                  {title || name}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n        {!movies.length && movieName && <div>Nothing found!</div>}\n      </>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b6c97f79ccd06825dbbba1fc21aaa7f0';\n\nexport const getMovieTrend = async () => {\n    const { data } = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n    return data.results;\n}\n\nexport const getSearchMovie = async (query) => {\n    const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return data;\n};\n\nexport const getMovieDetails = async (movieId) => {\n    const res = await axios.get(`movie/${movieId}?api_key=${API_KEY}`)\n        .catch(error => {\n            throw new Error('jjjj')\n        });\n    return res.data;\n};\n\nexport const getMovieCredits = async (movieId) => {\n    const { data } = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    return data.cast;\n};\n\nexport const getMovieReviews = async (movieId) => {\n    const { data } = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return data.results;\n};\n\n// export default getData;\n\n// https://api.themoviedb.org/3/search/movie?api_key=b6c97f79ccd06825dbbba1fc21aaa7f0&query=batmen"],"names":["useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","isLoadind","setIsLoading","location","useLocation","fullPath","pathname","search","movieName","get","useEffect","fetchData","getSearchMovie","results","console","log","className","style","onSubmit","e","preventDefault","query","target","movie","value","Notiflix","type","name","placeholder","autoComplete","color","defaultValue","variant","size","map","id","title","to","state","from","length","axios","API_KEY","getMovieTrend","data","getMovieDetails","movieId","catch","error","Error","res","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}